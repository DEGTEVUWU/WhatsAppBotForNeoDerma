package com.ivan_degtev.whatsappbotforneoderma.service.ai;

import com.ivan_degtev.whatsappbotforneoderma.component.DailyScheduler;
import com.ivan_degtev.whatsappbotforneoderma.config.LC4jAssistants.QuestionAnalyzer;
import com.ivan_degtev.whatsappbotforneoderma.config.LC4jAssistants.RAGAssistant;
import com.ivan_degtev.whatsappbotforneoderma.controller.AmoCrmController;
import com.ivan_degtev.whatsappbotforneoderma.controller.llm.LLMMemoryController;
import com.ivan_degtev.whatsappbotforneoderma.controller.whatsapp.WhatsAppSendController;
import com.ivan_degtev.whatsappbotforneoderma.exception.NotFoundException;
import com.ivan_degtev.whatsappbotforneoderma.model.Message;
import com.ivan_degtev.whatsappbotforneoderma.model.User;
import com.ivan_degtev.whatsappbotforneoderma.model.yClient.Appointment;
import com.ivan_degtev.whatsappbotforneoderma.repository.UserRepository;
import com.ivan_degtev.whatsappbotforneoderma.repository.yClient.AppointmentsRepository;
import com.ivan_degtev.whatsappbotforneoderma.repository.yClient.ServiceInformationRepository;
import com.ivan_degtev.whatsappbotforneoderma.service.impl.yClient.YClientSendServiceImpl;
import com.ivan_degtev.whatsappbotforneoderma.service.util.JsonLoggingService;
import com.ivan_degtev.whatsappbotforneoderma.service.util.PreparingDataForSendingService;
import com.ivan_degtev.whatsappbotforneoderma.tests.AssistantTest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.DependsOn;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.Scanner;
import java.util.UUID;


@Service
@Slf4j
@DependsOn("dailyScheduler")
public class LangChain4jService {

    private final ServiceInformationRepository serviceInformationRepository;
    private final DailyScheduler dailyScheduler;
    private final AmoCrmController amoCrmController;
    @Value("${open.ai.token}")
    private String openAiToken;
    private final AssistantTest assistantTest;
    private final QuestionAnalyzer questionAnalyzer;
    private final RAGAssistant ragAssistant;
    private final UserRepository userRepository;
    private final AppointmentsRepository appointmentsRepository;
    private final WhatsAppSendController whatsAppSendController;
    private final LLMMemoryController llmMemoryController;
    private final YClientSendServiceImpl yClientSendService;
    private final PreparingDataForSendingService preparingDataForSendingService;

    private final JsonLoggingService jsonLogging;

    public LangChain4jService(
            @Value("${open.ai.token}") String openAiToken,
            AssistantTest assistantTest,
            QuestionAnalyzer questionAnalyzer,
            RAGAssistant ragAssistant,
            UserRepository userRepository,
            AppointmentsRepository appointmentsRepository,
            WhatsAppSendController whatsAppSendController,
            LLMMemoryController llmMemoryController,
            YClientSendServiceImpl yClientSendService,
            ServiceInformationRepository serviceInformationRepository,
            DailyScheduler dailyScheduler,
            AmoCrmController amoCrmController,
            PreparingDataForSendingService preparingDataForSendingService,
            JsonLoggingService jsonLogging
    ) {
        this.openAiToken = openAiToken;
        this.assistantTest = assistantTest;
        this.questionAnalyzer = questionAnalyzer;
        this.ragAssistant = ragAssistant;
        this.userRepository = userRepository;
        this.appointmentsRepository = appointmentsRepository;
        this.whatsAppSendController = whatsAppSendController;
        this.llmMemoryController = llmMemoryController;
        this.yClientSendService = yClientSendService;
        this.serviceInformationRepository = serviceInformationRepository;
        this.dailyScheduler = dailyScheduler;
        this.amoCrmController = amoCrmController;
        this.preparingDataForSendingService = preparingDataForSendingService;
        this.jsonLogging = jsonLogging;
    }


    public void mainMethodByWorkWithLLM(
            User currentUser,
            Message currentMessage
    ) {
        String currentChatId = currentUser.getChatId();
        String textMessage = currentMessage.getText();
        String currentUserPhone = currentUser.getSenderPhoneNumber();

        if (questionAnalyzer.greetingMessage(textMessage)) {
            String greeting = """
                    –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ NeoDerma! üòä
                                        
                    –í —ç—Ç–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –æ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –ò–ò, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –≤–∞—à –æ–ø—ã—Ç:
                                        
                    1. *–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å:*
                       - –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ –ª—é–±—É—é —É—Å–ª—É–≥—É –∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.
                       - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.
                                        
                    2. *–ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è:*
                       - –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–∏–¥–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π.
                       - –ò–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π WhatsApp, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!
                                        
                    3. *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:*
                       - –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏, –º–∞—Å—Ç–µ—Ä–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—ë –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.\s
                       - –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç: *"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –∑–∞–ø–∏—Å—å –∫ [–∏–º—è –º–∞—Å—Ç–µ—Ä–∞]"*.
                                        
                    4. *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
                       - –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç: *"–ø—Ä–∞–≤–∏–ª–∞"*.
                       - –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ: *"–æ—á–∏—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—é"*.
                                        
                    –ñ–µ–ª–∞—é –≤–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåü
                    """;
            var answerFromSendMessage = whatsAppSendController.sendMessage(greeting, currentUserPhone).subscribe();
            jsonLogging.info("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ", answerFromSendMessage);
        } else if (questionAnalyzer.cleanHistoryMessage(textMessage)) {
            llmMemoryController.deleteMessages(currentChatId);

            String answerForDeletingHistory = """
                    –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!
                    –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!
                    """;
            var answerFromSendMessage = whatsAppSendController.sendMessage(
                            answerForDeletingHistory,
                            currentUserPhone
                    )
                    .subscribe();
            jsonLogging.info("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ", answerFromSendMessage);
        }

        //–í–ê–ñ–ù–û! –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –õ–õ–ú –ë–ï–ó –†–ï–ê–õ–¨–ù–û–ô –ó–ê–ü–ò–°–ò –í YCLIENT -
        //–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –ü–†–ò –†–ê–ë–û–¢–ï
//        else {
//            String LLMAnswer = assistantTest.chat(currentChatId, textMessage, currentChatId);
//            jsonLogging.info("–û—Ç–≤–µ—Ç –æ—Ç –õ–õ–ú –ø–æ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞: {}", LLMAnswer);
//            var answerFromSendMessage = whatsAppSendController
//                    .sendMessage(LLMAnswer, currentUserPhone)
//                    .subscribe();
//            jsonLogging.info("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ LangChain4j –≤ —á–∞—Ç–ø—É—à —Å–µ—Ä–≤–∏—Å - –≤ —Å–æ–æ–±—â–µ–Ω–∏—é —é–∑–µ—Ä—É, " +
//                    "–æ—Ç–≤–µ—Ç –æ—Ç –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {}", answerFromSendMessage);
//        }


        //–í–ê–ñ–ù–û! –§–ò–ù–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î –ü–û –û–¢–ü–†–ê–í–ö–ï –ó–ê–ü–†–û–° –ù–ê –°–û–ó–î–ê–ù–ò–ï –ë–†–û–ù–ò –í YCLIENT. –†–ê–°–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨ –ü–†–ò –¢–ï–°–¢–ï –ò –û–¢–ü–†–ê–í–ö–ï –ö–û–î–ê –í –ü–†–û–î
        else {
            String LLMAnswer = assistantTest.chat(currentChatId, textMessage, currentChatId);
            jsonLogging.info("–û—Ç–≤–µ—Ç –æ—Ç –õ–õ–ú –ø–æ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞: {}", LLMAnswer);

            var answerFromSendMessage = whatsAppSendController
                    .sendMessage(LLMAnswer, currentUserPhone)
                    .subscribe();
            jsonLogging.info("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ LangChain4j –≤ —á–∞—Ç–ø—É—à —Å–µ—Ä–≤–∏—Å - –≤ —Å–æ–æ–±—â–µ–Ω–∏—é —é–∑–µ—Ä—É, " +
                    "–æ—Ç–≤–µ—Ç –æ—Ç –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {}", answerFromSendMessage);

            Optional<Appointment> currentAppointment = appointmentsRepository.findByUser_UniqueIdForAppointment(
                    currentUser.getUniqueIdForAppointment()
            );
            if (currentAppointment.isPresent()) {
                if (isAppointmentReadyForShipment(currentAppointment.get())) {
                    User finalUser = userRepository.findUserByChatId(currentChatId)
                                    .orElseThrow(() -> new NotFoundException("–Æ–∑–µ—Ä —Å –∞–π–¥–∏ —á–∞—Ç–∞ " + currentChatId + " –Ω–µ –Ω–∞–π–¥–µ–Ω!"));
                    preparingDataForSendingService.sendingAndCheckToYclientService(finalUser, currentAppointment.get());
                }
            }
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Appointment, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–∞–Ω–Ω—ã–º–∏ –∏  –≥–æ—Ç–æ–≤—ã–π –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
     *
     * @param appointment
     * @return
     */
    public boolean isAppointmentReadyForShipment(Appointment appointment) {
        return appointment != null
                && Boolean.TRUE.equals(appointment.getCompletedBooking())
                && appointment.getApplicationSent() == null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ –∞–π–¥–∏ –ø–∞–º—è—Ç–∏
     *
     * @param memoryId
     * @return
     */
    private boolean memoryCheckForEmptiness(String memoryId) {
        return llmMemoryController.getMessages(memoryId).toString().isEmpty();
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –õ–õ–ú —á–µ—Ä–µ–∑ —Å–∫–∞–Ω–µ—Ä.
     * –ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤ DataInitializer(—É–¥–æ–±–Ω–µ–µ) –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –∏–∑ –∫–æ–¥–∞
     */
    public void testLLMLogicWithScanner() {
        User currentUser = new User();
        if (userRepository.existsByChatId("111")) {
            currentUser = userRepository.findUserByChatId("111").get();
        } else {
            currentUser.setChatId("111");
            currentUser.setSenderPhoneNumber("89005553535");
            currentUser.setUniqueIdForAppointment(UUID.randomUUID().toString());
            userRepository.save(currentUser);
        }

        Scanner scanner = new Scanner(System.in);
        while (true) {
            String question = scanner.nextLine();

            if (question.equals("exit")) {
                log.info("—Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç!");
                break;
            }
            String currentChatId = currentUser.getChatId();

            String answer = assistantTest.chat("111", question, "111");
            log.info("–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Å—Ç —á–∞—Ç–∞, —Å–∫–∞–Ω–µ—Ä: {}", answer);

            User checkUser = userRepository.findUserByChatId(currentChatId).get();
            Appointment currentAppointment = appointmentsRepository.findAppointmentByUser(currentUser);

            if ( currentAppointment != null
                    && checkUser.getAppointments().get(0).getCompletedBooking() != null
                    && checkUser.getAppointments().get(0).getCompletedBooking()) {

                preparingDataForSendingService.sendingAndCheckToYclientService(currentUser, currentAppointment);
            }
        }
        log.info("–°–∫–∞–Ω–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç!");
    }

}

